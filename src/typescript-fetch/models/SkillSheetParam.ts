/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Generator Kotlin Sample
 * OpenAPI Generator を用いた自動生成のサンプルコードです
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CareerList } from './CareerList';
import {
    CareerListFromJSON,
    CareerListFromJSONTyped,
    CareerListToJSON,
} from './CareerList';

/**
 * 
 * @export
 * @interface SkillSheetParam
 */
export interface SkillSheetParam {
    /**
     * 技術者コード
     * @type {string}
     * @memberof SkillSheetParam
     */
    engineerCd: string;
    /**
     * 所属
     * @type {string}
     * @memberof SkillSheetParam
     */
    affiliation: string;
    /**
     * 年齢
     * @type {number}
     * @memberof SkillSheetParam
     */
    age: number;
    /**
     * 性別
     * @type {string}
     * @memberof SkillSheetParam
     */
    sex: string;
    /**
     * 希望職種
     * @type {string}
     * @memberof SkillSheetParam
     */
    hopeOccupation: string;
    /**
     * 最寄り駅
     * @type {string}
     * @memberof SkillSheetParam
     */
    nearestStation: string;
    /**
     * 自己PR
     * @type {string}
     * @memberof SkillSheetParam
     */
    selfPR: string;
    /**
     * 経歴一覧
     * @type {Array<CareerList>}
     * @memberof SkillSheetParam
     */
    careerLists?: Array<CareerList>;
}

/**
 * Check if a given object implements the SkillSheetParam interface.
 */
export function instanceOfSkillSheetParam(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "engineerCd" in value;
    isInstance = isInstance && "affiliation" in value;
    isInstance = isInstance && "age" in value;
    isInstance = isInstance && "sex" in value;
    isInstance = isInstance && "hopeOccupation" in value;
    isInstance = isInstance && "nearestStation" in value;
    isInstance = isInstance && "selfPR" in value;

    return isInstance;
}

export function SkillSheetParamFromJSON(json: any): SkillSheetParam {
    return SkillSheetParamFromJSONTyped(json, false);
}

export function SkillSheetParamFromJSONTyped(json: any, ignoreDiscriminator: boolean): SkillSheetParam {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'engineerCd': json['engineerCd'],
        'affiliation': json['affiliation'],
        'age': json['age'],
        'sex': json['sex'],
        'hopeOccupation': json['hopeOccupation'],
        'nearestStation': json['nearestStation'],
        'selfPR': json['selfPR'],
        'careerLists': !exists(json, 'careerLists') ? undefined : ((json['careerLists'] as Array<any>).map(CareerListFromJSON)),
    };
}

export function SkillSheetParamToJSON(value?: SkillSheetParam | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'engineerCd': value.engineerCd,
        'affiliation': value.affiliation,
        'age': value.age,
        'sex': value.sex,
        'hopeOccupation': value.hopeOccupation,
        'nearestStation': value.nearestStation,
        'selfPR': value.selfPR,
        'careerLists': value.careerLists === undefined ? undefined : ((value.careerLists as Array<any>).map(CareerListToJSON)),
    };
}

