/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Generator Kotlin Sample
 * OpenAPI Generator を用いた自動生成のサンプルコードです
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SkillRegisterUpdate,
  SkillSheetParam,
} from '../models';
import {
    SkillRegisterUpdateFromJSON,
    SkillRegisterUpdateToJSON,
    SkillSheetParamFromJSON,
    SkillSheetParamToJSON,
} from '../models';

export interface SkillPostRequest {
    skillSheetParam?: SkillSheetParam;
}

export interface SkillPutRequest {
    skillSheetParam?: SkillSheetParam;
}

/**
 * 
 */
export class SkillApi extends runtime.BaseAPI {

    /**
     * スキルシートを検索する
     * スキルシート
     */
    async skillGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkillSheetParam>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // token authentication
        }

        const response = await this.request({
            path: `/skill/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillSheetParamFromJSON(jsonValue));
    }

    /**
     * スキルシートを検索する
     * スキルシート
     */
    async skillGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkillSheetParam> {
        const response = await this.skillGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * スキルシートを登録する
     * スキルシート登録
     */
    async skillPostRaw(requestParameters: SkillPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkillRegisterUpdate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // token authentication
        }

        const response = await this.request({
            path: `/skill/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillSheetParamToJSON(requestParameters.skillSheetParam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillRegisterUpdateFromJSON(jsonValue));
    }

    /**
     * スキルシートを登録する
     * スキルシート登録
     */
    async skillPost(requestParameters: SkillPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkillRegisterUpdate> {
        const response = await this.skillPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * スキルシートを更新する
     * スキルシート更新
     */
    async skillPutRaw(requestParameters: SkillPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkillRegisterUpdate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = this.configuration.apiKey("X-API-KEY"); // token authentication
        }

        const response = await this.request({
            path: `/skill/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SkillSheetParamToJSON(requestParameters.skillSheetParam),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillRegisterUpdateFromJSON(jsonValue));
    }

    /**
     * スキルシートを更新する
     * スキルシート更新
     */
    async skillPut(requestParameters: SkillPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkillRegisterUpdate> {
        const response = await this.skillPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
